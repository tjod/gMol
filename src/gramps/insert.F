C *************************************************************
C This file contains source code for the gMol computer program
C  Copyright (C) 1981-2010 by TJ O'Donnell and
C  Copyright (C) 2005-2010 gNova, Inc.
C It is unlawful to modify or remove this copyright notice.
C See the accompanying LICENSE file for further information. 
C *************************************************************
      SUBROUTINE INSERT(ARG,SWITCHES)
C
      IMPLICIT NONE
C
#include "UDLIST.FOR"
#include "ERRORS.FOR"
      INTEGER ASIZE,BSIZE
	INTEGER VPOINT, AID, ASTART, AEND, ADEPTH, ALEVEL
	INTEGER BID, BSTART, BEND, BDEPTH, BLEVEL
	INTEGER I, J, SHIFT, TMP
C
      CHARACTER ARG*(*)
      CHARACTER SWITCHES*(*)
C
C       THIS ROUTINES MANIPULATES THE TREE BY MOVING
C       AN OBJECT TO A SPECIFIED PLACE IN THE TREE.
C       THE COMMAND: INSERT AOBJ,BOBJ WILL PLACE AOBJ
C       AFTER BOBJ IN THE TREE.  IF AOBJ IS A GROUP, THEN
C       ALL MEMBERS OF THE GROUP WILL BE MOVED ALONG
C       WITH AOBJ.  IF BOBJ IS A GROUP, AOBJ WILL BE
C       INSERTED INTO THAT GROUP (MOVED AFTER BOBJ IN
C       THE TREE).
C
C
      POINT=1
 5    VPOINT=POINT
      CALL NAMID(ARG,POINT,AID)
      IF(ERROR.NE.0)CALL TELLUSER(ERROR,*999)
C
C       FIND OUT ABOUT THE TO-BE-INSERTED OBJECT
C
      CALL GROUPINFO(AID,ASTART,AEND,ADEPTH,ALEVEL,ASIZE)
      IF(ASTART.EQ.0)THEN
        POINT=VPOINT
        CALL TELLUSER(NOTINTREE,*999)
      END IF
C
C       CHECK FOR THE /MENU SWITCH
C
      IF(.NOT.MATCH(SWITCHES,'MENU'))THEN
C
C       FIND OUT WHERE IT IS TO BE INSERTED
C
        IF(POINT.EQ.0)CALL TELLUSER(INCOMP,*999)
        VPOINT=POINT
        CALL NAMID(ARG,POINT,BID)
        IF(ERROR.NE.0)CALL TELLUSER(ERROR,*999)
        IF(AID.EQ.BID)RETURN
        CALL GROUPINFO(BID,BSTART,BEND,BDEPTH,BLEVEL,BSIZE)
        IF(BSTART.EQ.0)THEN
          POINT=VPOINT
          CALL TELLUSER(NOTINTREE,*999)
        END IF
C
C       WILL THIS INSERT OVERFLOW THE MAXIMUM DEPTH
C       OF THE TREE (THE HARDWARE PUSH/POP STACK LIMIT)?
C
        IF(TYPOBJ(BID).EQ.GROUP)THEN
          IF(ADEPTH+BLEVEL.GE.MAXDEPTH)CALL TELLUSER(TOODEEP,*999)
        ELSE
          IF(ADEPTH+BLEVEL.GT.MAXDEPTH)CALL TELLUSER(TOODEEP,*999)
        END IF
C
      ELSE
C
C       GROUPS MAY NOT BE INSERTED INTO THE MENU.
C
        IF(TYPOBJ(AID).NE.ORDINARY)THEN
          POINT=VPOINT
          CALL TELLUSER(NOTMENU,*999)
        ELSE
          MENUEND=MENUEND+1
          MENUTREE(MENUEND)=AID
          KINDOBJ(AID)=IOR(KINDOBJ(AID),MENUBYTE)
          TREEEND=TREEEND-1
          DO 8 I=ASTART,TREEEND
 8        TREE(I)=TREE(I+1)
          IF(POINT.EQ.0)THEN
            MCHANGE=.TRUE.
            TCHANGE=.TRUE.
            RETURN
          ELSE
            GOTO 5
          END IF
        END IF
      END IF
C
C       IF THE OBJECT IS A GROUP 
C       IF THE OBJECT TO BE INSERTED IS NOT A GROUP,
C       THEN JUST SHIFT THE TREE TO OPEN A HOLE AND
C       PUT THE OBJECT NUMBER INTO THE HOLE.
C
      IF(TYPOBJ(AID).NE.GROUP)THEN
        IF(ASTART.LT.BSTART)THEN
          DO 10 I=ASTART,BSTART-1
 10       TREE(I)=TREE(I+1)
          TREE(BSTART)=AID
          TCHANGE=.TRUE.
          RETURN
        ELSE
          DO 20 I=ASTART,BSTART+1,-1
 20       TREE(I)=TREE(I-1)
          TREE(BSTART+1)=AID
          TCHANGE=.TRUE.
          RETURN
        END IF
C
C       REARRANGE THE TREE BY SHIFTING DONW ALL GROUP
C       MEMBERS AS MANY TIMES AS NECESSARY.  
C
      ELSE
C
C       SINCE THE OBJECT TO BE INSERTED IS A GROUP,
C       A MORE COMPLICATED REARRANGEMENT MUST BE DONE.
C       SO FIRST GO THROUGH THE GROUP AND SEE IF THE USER
C       IS TRYING TO INSERT THE GROUP INTO ITSELF!
C       DON'T ALLOW A GROUP TO BE INSERTED INTO ITSELF!
C
        DO 30 I=ASTART,AEND
        IF(TREE(I).EQ.BID)CALL TELLUSER(NOINSERT,*999)
 30     CONTINUE
C
C       NOW BEGIN THE SHIFTING PROCESS, EITHER UP (SHIFT > 0)
C       OR DOWN (SHIFT < 0).  SHIFT COULD ONLY BE ZERO IF
C       AID = BID, BUT THIS WAS CHECKED FOR ABOVE.
C
        SHIFT=BSTART-AEND
        IF(SHIFT.GT.0)THEN
          DO 50 I=1,SHIFT
          TMP=TREE(AEND+I)
C
          DO 40 J=AEND+I,ASTART+I,-1
 40       TREE(J)=TREE(J-1)
C
          TREE(ASTART+I-1)=TMP
 50       CONTINUE
          TCHANGE=.TRUE.
          RETURN
C
        ELSE
          SHIFT=ASTART-BSTART-1
C
          DO 70 I=1,SHIFT
          TMP=TREE(ASTART-I)
C
          DO 60 J=ASTART-I+1,AEND-I+1
 60       TREE(J-1)=TREE(J)
C
          TREE(AEND-I+1)=TMP
 70       CONTINUE
          TCHANGE=.TRUE.
          RETURN
        END IF
C
      END IF
C
 999  RETURN
      END
