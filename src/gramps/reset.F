C *************************************************************
C This file contains source code for the gMol computer program
C  Copyright (C) 1981-2010 by TJ O'Donnell and
C  Copyright (C) 2005-2010 gNova, Inc.
C It is unlawful to modify or remove this copyright notice.
C See the accompanying LICENSE file for further information. 
C *************************************************************
      SUBROUTINE DORESET(ARG,SWITCHES)
C
      IMPLICIT NONE
      CHARACTER ARG*(*)
      CHARACTER SWITCHES*(*)
C
#include "UDLIST.FOR"
#include "ERRORS.FOR"
C
	INTEGER START, FINISH, DEPTH, LEVEL, SIZE
	INTEGER I, K, NID, ESID
C
C       THIS ROUTINE RESETS THE TFM MATRICES OF AN OBJ
C       TO UNIT MATRICES.  THIS IS THE USER CALLED ROUTINE,
C       THERE IS A GRAMPS CALLED ROUTINE RRESET WHICH
C       ACTUALLY DOES THE DIRTY WORK.
C
C       GET THE OBJ NAME.
C
      POINT=1
 1    CALL NAMID(ARG,POINT,ID)
      IF(ERROR.NE.0)CALL TELLUSER(ERROR,*999)
C
C       WRESET READS SWITCHES LIKE /TRAN OR /ROT=XY AND FILLS
C       THE COMMON WORK ARRAY WITH LOGICAL VALUES CORRESPONDING
C       TO THE MTFM TRANSFORMATIONS.  THIS INFO IS USED, HERE,
C       TO RESET ONLY THOSE SPECIFIED TFM'S.
C
c      CALL WRESET(SWITCHES)
      If(WRESET(SWITCHES))CONTINUE
C
      CALL RRESET(ID,SWITCHES)
C
C       IF /GROUP IS SPECIFIED, THE WHOLE GROUP IS TO BE RESET
C
      IF( MATCH(SWITCHES,'GROUP').AND.(TYPOBJ(ID).EQ.GROUP) )THEN
        CALL GROUPINFO(ID,START,FINISH,DEPTH,LEVEL,SIZE)
        DO 30 I=START+1,FINISH
        K=TREE(I)
        IF(K.GT.GROUPEND)CALL RRESET(K,SWITCHES)
 30     CONTINUE
      END IF
C
      IF(POINT.NE.0)GOTO 1
C
      DCHANGE=.TRUE.
 999  RETURN
      END
C
C
      SUBROUTINE RRESET(NID,SWITCHES)
C
      IMPLICIT NONE
	INTEGER NID
      CHARACTER SWITCHES*(*)
C
#include "UDLIST.FOR"
#include "DEFVAL.FOR"
	INTEGER I, ESID
C
      LOGICAL LWORK(WORKSIZE)
C     COMMON/WORKSPACE/LWORK
      EQUIVALENCE (LWORK,WORK)
C
C       THIS ROUTINE DOES THE MATRIX MANIPULATION TO
C       RESET THE TFM'S OF AN OBJ.  ALSO RESET THE
C       TFM VALUES IN TFMVAL, TFMINC, ETC.
C       THE DIAL ASSIGNMENTS ARE ALSO REMOVED, UNLESS /LEAVE
C       IS SPECIFIED IN THE RESET COMMAND
C
      ESID=IDOBJ(NID)
C
C       THE WORLDS HAVE THIER UNIQUE TFMS TO BE RESET
C
      IF(NID.LE.RWORLD)THEN
        DO 10 I=1,WTFM
        IF(LWORK(MTFM+I))THEN
          WLDVAL(I,NID)=DEFWLD(I)
          WLDINC(I,NID)=0
        END IF
 10     CONTINUE
C
      END IF
C
C       SHOULD WE LEAVE THE DIAL ASSIGNMENTS 
C       AND THE FUNCTION ASSIGNMENTS ON?
C       IF /LEAVE, YES.
C
      IF(MATCH(SWITCHES,'LEAVE'))THEN
        CALL NSETTFM(NID,WORK)
      ELSE
        CALL SETTFM(NID,WORK)
        IF(NID.LE.RWORLD)THEN
          DO 20 I=1,WTFM
          IF(LWORK(MTFM+I))THEN
            DEVWLD(I,NID)=0
            FNWLD(I,NID)=0
          END IF
 20       CONTINUE
          CALL ORTOTAL(NID)
        END IF
      END IF
C
C       USHOW UPDATES THE MATRICES IN THE UDL BASED ON
C       THE VALUES IN TFMVAL.
C
C     DO 30 I=UTRANX,SUMMARY-1
C     CALL USHOW(NID,I)
C 30  CONTINUE
C
C       WSHOW DOES TO THE WORLDS WHAT USHOW DOES TO OBJ'S
C
C     IF(NID.LE.RWORLD)THEN
C       CALL WSHOW(NID,WMOVEX)
C       CALL WSHOW(NID,WWINDS)
C     END IF
C
C       IF THE /UNFIX SWITCH IS GIVEN, THE FIX MATRIX
C       IS ALSO RESET TO THE UNIT MATRIX
C
      IF(MATCH(SWITCHES,'UNFIX'))THEN
        CALL UNIT(FIXMAT(1,1,NID))
      END IF
C
C
      RETURN
      END
C
C
      Function WRESET(SWITCHES)
C
      IMPLICIT NONE
C
#include "UDLIST.FOR"
      CHARACTER SWITCHES*(*)
      CHARACTER*12 VALUE
      CHARACTER*1 BLANK
      LOGICAL PRESENT
	INTEGER I
C
      LOGICAL LWORK(WORKSIZE)
C     COMMON/WORKSPACE/LWORK
      EQUIVALENCE (LWORK,WORK)
C
C       THIS ROUTINE INTERPRETS SWITCHES LIKE /TRAN OR /SCALE=X
C       AND FILLS THE WORK ARRAY WITH LOGICAL VALUES FOR THOSE
C       TFMS WHICH WERE SPECIFIED BY THE SWITCH(ES).
C       RESET, FIX AND SHOW USE THIS INFO.
C
C       NOW SETUP THE WORK ARRAY SO THAT ENTRIES CORRESPOND
C       TO WHICH TFMS ARE TO BE RESET.
C
      BLANK=' '
      IF(SWITCHES.EQ.BLANK)GOTO 998
C
      DO 10 I=1,MTFM+WTFM
 10   LWORK(I)=.FALSE.
C
	Call upcase(SWITCHES)
      CALL SMATCH(SWITCHES,'TRANSLATE',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='XYZWPQRS'
        IF(INDEX(VALUE,'X').NE.0)LWORK(UTRANX)=.TRUE.
        IF(INDEX(VALUE,'Y').NE.0)LWORK(UTRANY)=.TRUE.
        IF(INDEX(VALUE,'Z').NE.0)LWORK(UTRANZ)=.TRUE.
        IF(INDEX(VALUE,'W').NE.0)LWORK(UTRANW)=.TRUE.
        IF(INDEX(VALUE,'P').NE.0)LWORK(UATRANX)=.TRUE.
        IF(INDEX(VALUE,'Q').NE.0)LWORK(UATRANY)=.TRUE.
        IF(INDEX(VALUE,'R').NE.0)LWORK(UATRANZ)=.TRUE.
        IF(INDEX(VALUE,'S').NE.0)LWORK(UATRANW)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'ROTATE',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='XYZPQR'
        IF(INDEX(VALUE,'X').NE.0)LWORK(UROTXX)=.TRUE.
        IF(INDEX(VALUE,'Y').NE.0)LWORK(UROTYY)=.TRUE.
        IF(INDEX(VALUE,'Z').NE.0)LWORK(UROTZZ)=.TRUE.
        IF(INDEX(VALUE,'P').NE.0)LWORK(UAROTX)=.TRUE.
        IF(INDEX(VALUE,'Q').NE.0)LWORK(UAROTY)=.TRUE.
        IF(INDEX(VALUE,'R').NE.0)LWORK(UAROTZ)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'SCALE',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='XYZWPQRS'
        IF(INDEX(VALUE,'P').NE.0)LWORK(UASCALX)=.TRUE.
        IF(INDEX(VALUE,'Q').NE.0)LWORK(UASCALY)=.TRUE.
        IF(INDEX(VALUE,'R').NE.0)LWORK(UASCALZ)=.TRUE.
        IF(INDEX(VALUE,'S').NE.0)LWORK(UASCALW)=.TRUE.
        IF(INDEX(VALUE,'X').NE.0)LWORK(USCALEX)=.TRUE.
        IF(INDEX(VALUE,'Y').NE.0)LWORK(USCALEY)=.TRUE.
        IF(INDEX(VALUE,'Z').NE.0)LWORK(USCALEZ)=.TRUE.
        IF(INDEX(VALUE,'W').NE.0)LWORK(USCALEW)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'INTENSITY',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='TAPDYE'
        IF(INDEX(VALUE,'T').NE.0)LWORK(UITRNSP)=.TRUE.
        IF(INDEX(VALUE,'P').NE.0)LWORK(UISPEC)=.TRUE.
        IF(INDEX(VALUE,'D').NE.0)LWORK(UIDIFF)=.TRUE.
        IF(INDEX(VALUE,'A').NE.0)LWORK(UIAMBI)=.TRUE.
        IF(INDEX(VALUE,'Y').NE.0)LWORK(UISHIN)=.TRUE.
        IF(INDEX(VALUE,'E').NE.0)LWORK(UIEMIS)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'COLOR',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='HSV'
        IF(INDEX(VALUE,'H').NE.0)LWORK(UCHUE)=.TRUE.
        IF(INDEX(VALUE,'S').NE.0)LWORK(UCSAT)=.TRUE.
        IF(INDEX(VALUE,'V').NE.0)LWORK(UCVAL)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'FRAME',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='NI'
        IF(INDEX(VALUE,'N').NE.0)LWORK(UFRAME)=.TRUE.
        IF(INDEX(VALUE,'I').NE.0)LWORK(UFRAMI)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'PERSPECTIVE',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='SVPAHYFDEW'
        IF(INDEX(VALUE,'S').NE.0)LWORK(MTFM+WWINDS)=.TRUE.
        IF(INDEX(VALUE,'V').NE.0)LWORK(MTFM+WWINDV)=.TRUE.
        IF(INDEX(VALUE,'P').NE.0)LWORK(MTFM+WWINDP)=.TRUE.
        IF(INDEX(VALUE,'A').NE.0)LWORK(MTFM+WWINDA)=.TRUE.
        IF(INDEX(VALUE,'H').NE.0)LWORK(MTFM+WWINDH)=.TRUE.
        IF(INDEX(VALUE,'Y').NE.0)LWORK(MTFM+WWINDY)=.TRUE.
        IF(INDEX(VALUE,'F').NE.0)LWORK(MTFM+WFOG  )=.TRUE.
        IF(INDEX(VALUE,'D').NE.0)LWORK(MTFM+WDEPTH)=.TRUE.
        IF(INDEX(VALUE,'E').NE.0)LWORK(MTFM+WWINDE)=.TRUE.
        IF(INDEX(VALUE,'W').NE.0)LWORK(MTFM+WWINDW)=.TRUE.
      END IF
      CALL SMATCH(SWITCHES,'MOVE',VALUE,PRESENT)
      IF(PRESENT)THEN
        IF(VALUE.EQ.BLANK)VALUE='XYZW'
        IF(INDEX(VALUE,'X').NE.0)LWORK(MTFM+WMOVEX)=.TRUE.
        IF(INDEX(VALUE,'Y').NE.0)LWORK(MTFM+WMOVEY)=.TRUE.
        IF(INDEX(VALUE,'Z').NE.0)LWORK(MTFM+WMOVEZ)=.TRUE.
        IF(INDEX(VALUE,'W').NE.0)LWORK(MTFM+WMOVEW)=.TRUE.
      END IF
C
C       NOW...IF NO ELEMENT WAS SET TRUE, THAT MEANS NO TFM
C       SWITCH WAS SPECIFIED.  SO ASSUME THAT ALL ARE
C       TO BE RESET and return false.
C
	WRESET=.TRUE.
      DO 20 I=1,MTFM+WTFM
 20   IF( LWORK(I) )GOTO 999
C
 998  CONTINUE
      DO 30 I=1,MTFM+WTFM
 30   LWORK(I)=.TRUE.
	WRESET=.FALSE.
C
 999  RETURN
      END
