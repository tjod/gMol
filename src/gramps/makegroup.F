C *************************************************************
C This file contains source code for the gMol computer program
C  Copyright (C) 1981-2010 by TJ O'Donnell and
C  Copyright (C) 2005-2010 gNova, Inc.
C It is unlawful to modify or remove this copyright notice.
C See the accompanying LICENSE file for further information. 
C *************************************************************
      SUBROUTINE MAKEGROUP(ARG)
C
      IMPLICIT NONE
C
#include "UDLIST.FOR"
#include "ERRORS.FOR"
C
      CHARACTER ARG*(*)
      CHARACTER NAME*(NAMMAX)
      INTEGER ASIZE,BSIZE
	INTEGER AID, PNT2, BID, PNT3, GID, ASTART, AEND, ADEPTH, ALEVEL
	INTEGER BSTART, BEND, BDEPTH, BLEVEL, LEVEL, I, K
C
C       THIS ROUTINE MAKES A GROUP
C       FIRST PARSE THE ARGS AND MAKE SURE THE
C       NAMES ARE OK
C       SAVE ARG POINTERS SO TELLUSER CAN POINT AT THE
C       RIGHT ARGS IF I FIND ERRORS LATER.
C
      POINT=1
      CALL NAMID(ARG,POINT,AID)
      IF(ERROR.NE.0)CALL TELLUSER(ERROR,*999)
      IF(POINT.EQ.0)CALL TELLUSER(NONAME,*999)
      PNT2=POINT
      CALL NAMID(ARG,POINT,BID)
      IF(ERROR.NE.0)CALL TELLUSER(ERROR,*999)
      IF(POINT.EQ.0)CALL TELLUSER(NONAME,*999)
      PNT3=POINT
      CALL NAMEID(ARG,POINT,GID,NAME)
      IF(ERROR.EQ.0)ERROR=DUPNAM
      IF(ERROR.NE.OBJERR)THEN
        POINT=PNT3
        CALL TELLUSER(ERROR,*999)
      END IF
      ERROR=0
C
C       LOOK FOR THE FIRST OBJECT AND KEEP TRACK OF
C       ITS LEVEL, THAT IS OF THE PUSP/POP COUNT
C
      CALL GROUPINFO(AID,ASTART,AEND,ADEPTH,ALEVEL,ASIZE)
      IF(ASTART.EQ.0)THEN
        POINT=1
        NPOINT=PNT2
        CALL TELLUSER(NOTINTREE,*999)
      END IF
C
C       IF THE OBJECT IS ALREADY AT THE MAXIMUM LEVEL
C       OR, IF IT IS A GROUP, THE GROUP HAS THE MAXIMUM DEPTH
C       THEN ANOTHER GROUPING WOULD BE DISASTROUS
C
      IF(ALEVEL+ADEPTH.GE.MAXDEPTH)CALL TELLUSER(TOODEEP,*999)
C
C       FIND THE SECOND OBJECT.  THIS OBJECT MUST FOLLOW
C       THE FIRST OBJECT IN THE TREE.  ALSO THERE
C       CAN BE NO UNBALANCED GROUPEND BETWEEN A AND B.
C
      CALL GROUPINFO(BID,BSTART,BEND,BDEPTH,BLEVEL,BSIZE)
      IF(BSTART.EQ.0)THEN
        POINT=PNT2
        NPOINT=PNT3
        CALL TELLUSER(NOTINTREE,*999)
      END IF
      IF(BSTART.LT.ASTART)CALL TELLUSER(BADGROUP,*999)
      IF(BLEVEL+BDEPTH.GE.MAXDEPTH)CALL TELLUSER(TOODEEP,*999)
C
C       CHECK FOR UNBALANCED GROUPEND BETWEEN A AND B.
C       TELL USER THAT WOULD BE A BAD GROUP IF THERE IS
C       AN UNBALANCE.
C
      LEVEL=ALEVEL
      DO 10 I=ASTART,BSTART
      K=TREE(I)
      IF(K.LE.GROUPEND)THEN
        LEVEL=LEVEL-1
      ELSE IF(TYPOBJ(K).EQ.GROUP)THEN
        LEVEL=LEVEL+1
      END IF
      IF(LEVEL.LT.ALEVEL)CALL TELLUSER(BADGROUP,*999)
 10   CONTINUE
C
      IF(BLEVEL.EQ.ALEVEL)GOTO 30
C
C       THERE IS AN UNBALANCED GROUP START, THOUGH
C       SO BALANCE IT OFF BY INCLUDING
C       MORE AFTER THIS OBJECT
C
      LEVEL=BLEVEL
      DO 20 I=BEND+1,TREEEND
      K=TREE(I)
      IF(K.LE.GROUPEND)THEN
        LEVEL=LEVEL-1
      ELSE
        IF(TYPOBJ(K).EQ.GROUP)LEVEL=LEVEL+1
      END IF
      IF(LEVEL.EQ.ALEVEL)THEN
        BEND=I
        GOTO 30
      END IF
 20   CONTINUE
C
C       WE MADE IT!  OPEN THE NEW GROUP
C
 30   CALL GROUPMAKE(ASTART,BEND,NAME)
C
 999  RETURN
      END
C
C
      SUBROUTINE GROUPMAKE(ASTART,BEND,NAME)
C
      IMPLICIT NONE
	INTEGER ASTART, BEND
      CHARACTER NAME*(*)
C
#include "UDLIST.FOR"
#include "ERRORS.FOR"
C
      INTEGER ASIZE,BSIZE, I
C
      CALL OPENOBJ(NAME,GROUP)
      IF(ERROR.NE.0)CALL TELLUSER(ERROR,*999)
      CALL CLOSEOBJ(GROUP)
      KINDOBJ(NOBJ)=GROUP
C
C       SHIFT DOWN THE TREE TO PUT IN THE GROUPEND MARK
C
      DO 40 I=TREEEND,BEND+1,-1
      TREE(I+2)=TREE(I)
 40   CONTINUE
      TREE(BEND+1)=GROUPEND
C
C       KEEP SHIFTING AND THEN PUT IN THE GROUP'S ID
C
      DO 50 I=BEND+1,ASTART,-1
      TREE(I+1)=TREE(I)
 50   CONTINUE
      TREE(ASTART)=NOBJ
C
C       MODIFY THE TREE END TO REFLECT THE ADDITION
C       OF THE GROUP AND ITS END.
C       LETS THE DISPLAY PROGRAM KNOW ABOUT THE TREE CHANGE
C       BY SETTING TCHANGE=.TRUE.
C
      TREEEND=TREEEND+2
      TCHANGE=.TRUE.
C
 999  RETURN
      END
